class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        int startc = 0;
        int startr = 0;
        int endc = matrix[0].length-1;
        int endr = matrix.length-1;
        // int[][] arr = new int[matrix.length][matrix[0].length];
        ArrayList arr = new ArrayList<>();
        int count = 0;
        int sum = (matrix.length)*(matrix[0].length);
        while(startc<=endc && startr<=endr && count <= sum){
        if(count < sum){
            
        for(int i = startc ; i <= endc ; i++){
            arr.add(matrix[startr][i]);
            count++;
        }
        startr++;
        }
        if(count < sum){

        for(int i = startr ; i <= endr ; i++){
             arr.add(matrix[i][endc]);
             count++;
        }
        endc--;
        }
        // if(startr<=endr){
         if(count < sum){
            
        for(int i = endc ; i >= startc ; i--){
            arr.add(matrix[endr][i]);
            count++;
        }
        endr--;
        }
        // }
        // if(startc <= endc){
         if(count < sum){
            
        for(int i = endr ; i >= startr ; i--){
           arr.add(matrix[i][startc]);
           count++;
        }
        startc++;
        }
        // }
        }
        return arr;
        
    }

}